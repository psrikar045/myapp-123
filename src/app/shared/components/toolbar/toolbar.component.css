:host {
  display: block;
  position: fixed; /* Should be on .app-toolbar, but :host can enforce block context */
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
}

.app-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 16px;
  height: 64px; /* Standard Material toolbar height */
  background-color: rgba(255, 255, 255, 0.9); /* Light mode default with transparency */
  color: #333; /* Light mode text */
  transition: transform 0.3s ease-in-out, background-color 0.3s ease-in-out, opacity 0.3s ease-in-out;
  position: fixed; /* Ensure toolbar itself is fixed */
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000; /* Ensure toolbar is on top */
}

.app-toolbar.toolbar-hidden {
  transform: translateY(-100%);
}

/* Theme specific styles */
.app-toolbar.dark-mode-toolbar {
  background-color: rgba(30, 30, 30, 0.9); /* Dark mode background with transparency */
  color: #f0f0f0; /* Dark mode text */
}

.app-toolbar.dark-mode-toolbar .mat-button,
.app-toolbar.dark-mode-toolbar .mat-icon-button .mat-icon, /* Target icon within button */
.app-toolbar.dark-mode-toolbar .mat-icon { /* General icons if any are direct children */
  color: #f0f0f0;
}

.app-toolbar.dark-mode-toolbar .company-logo-icon,
.app-toolbar.dark-mode-toolbar .theme-icon,
.app-toolbar.dark-mode-toolbar .get-started-icon,
.app-toolbar.dark-mode-toolbar .mobile-menu-trigger-button .mat-icon {
    /* Assuming SVGs are single color or designed to work with parent 'color' */
    /* If SVGs have their own fill, this might not override unless !important or specific SVG styling */
}


.app-toolbar.dark-mode-toolbar .get-started-button {
  color: #000; /* Text color on accent button in dark mode */
}
.app-toolbar.dark-mode-toolbar .get-started-button .mat-icon {
  color: #000; /* Icon color on accent button in dark mode */
}


/* Toolbar Sections */
.toolbar-section {
  display: flex;
  align-items: center;
  gap: 8px; /* Spacing between items in a section */
}

.left-section {
  flex-shrink: 0;
}

.middle-section {
  flex-grow: 1;
  justify-content: center;
  /* Desktop nav buttons are now controlled by *ngIf="!isMobileView" */
}

.middle-section .mat-button {
  margin: 0 4px; /* Slightly reduced margin for more items */
}

.right-section {
  flex-shrink: 0;
  justify-content: flex-end;
}

/* Logo */
.company-logo-button {
  padding: 0;
  width: auto; /* Let icon define size */
  height: auto;
}
.company-logo-icon {
  width: 36px;
  height: 36px;
  vertical-align: middle;
}

/* Hamburger menu trigger button - shown by *ngIf="isMobileView" */
.mobile-menu-trigger-button .mat-icon {
  font-size: 28px;
  width: 28px;
  height: 28px;
}

/* Get Started Button */
.get-started-button .mat-icon {
  margin-left: 8px;
  font-size: 20px;
  width: 20px;
  height: 20px;
}

/* Theme Toggle Icon */
.theme-icon {
  font-size: 24px;
  width: 24px;
  height: 24px;
}

/* Mobile Menu Overlay */
.mobile-menu-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(255, 255, 255, 0.98); /* Light mode overlay */
  z-index: 1001; /* Above toolbar */
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0; /* Let header and nav define padding */
  opacity: 0;
  transform: translateX(100%); /* Start off-screen for slide-in animation */
  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out, background-color 0.3s ease-in-out;
  box-sizing: border-box;
}

.mobile-menu-overlay.dark-mode-overlay {
  background-color: rgba(18, 18, 18, 0.98); /* Dark mode overlay */
}

/* When mobile menu is open (controlled by *ngIf and class potentially for animation state) */
:host ::ng-deep .cdk-overlay-container { /* Ensure Angular Material overlays don't interfere if any are used */
    z-index: 1002 !important; /* Example if needed, but direct z-index on .mobile-menu-overlay is usually enough */
}

/* If using Angular animations, this class might be added by animation state */
/* For pure CSS transition with *ngIf, the transition starts as element is added to DOM */
.mobile-menu-overlay:not(.ng-animating) { /* Adjust if using Angular animations */
    /* This selector might be tricky with just *ngIf.
       The transition on .mobile-menu-overlay itself will apply when it's added/removed if *ngIf is the only control.
       However, for *ngIf, opacity and transform need to be set to their "open" state immediately
       if we want to see it. The transition then applies on removal.
       For smooth open AND close, often a visibility class is toggled rather than just *ngIf,
       or Angular animations are used.
       Given the prompt, we assume *ngIf is primary. The transition will mostly affect closing.
       To make it animate in, we'd need to add an 'open' class shortly after *ngIf makes it appear.
    */
}

/* Let's assume the transition on .mobile-menu-overlay handles the "open" state: */
/* We set initial state (off-screen/invisible) and transition to visible state when *ngIf adds it */
/* For this to work well with *ngIf for opening, you might need a slight delay or an 'active' class. */
/* However, the request is to use *ngIf. The provided CSS will make it appear instantly and transition out. */
/* To improve, one might add an 'active' class in toggleMobileMenu after a tick. */

/* If isMobileMenuOpen becomes true, these styles define the "open" state for transition */
.mobile-menu-overlay {
  /* Forcing open state for transition if *ngIf is true */
  /* This is tricky. Let's assume the transition applies on add/remove. */
  /* If isMobileMenuOpen is true, it should be visible */
}

/* If we want a slide-in effect when *ngIf becomes true: */
/* The component would need to manage an 'isAnimatingIn' class briefly */
/* For simplicity, let's make it fade-in and slide from right */
.mobile-menu-overlay {
  /* Initial state (when *ngIf is false, it's not in DOM) */
  /* When *ngIf becomes true, it's added to DOM. These are its "from" styles for animation if managed by a class. */
  /* If not managed by a class, these are its "to" styles when added. */
}
/* Updated to animate in: */
.mobile-menu-overlay { /* This is the state when *ngIf="isMobileMenuOpen" is true */
    opacity: 1;
    transform: translateX(0);
}


.mobile-menu-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  padding: 0 16px;
  height: 64px; /* Match toolbar height */
  border-bottom: 1px solid rgba(0,0,0,0.1);
  flex-shrink: 0; /* Prevent header from shrinking */
  box-sizing: border-box;
}
.mobile-menu-overlay.dark-mode-overlay .mobile-menu-header {
  border-bottom: 1px solid rgba(255,255,255,0.1);
}

.company-logo-button-mobile .company-logo-icon-mobile {
  width: 32px;
  height: 32px;
}
.mobile-menu-overlay.dark-mode-overlay .mat-icon-button,
.mobile-menu-overlay.dark-mode-overlay .mat-button {
  color: #f0f0f0;
}

.mobile-nav {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  padding: 20px 0;
  overflow-y: auto; /* Allow scrolling if many items */
  flex-grow: 1; /* Take remaining space */
  box-sizing: border-box;
}

.mobile-nav-button {
  width: calc(100% - 32px); /* Full width with padding */
  max-width: 300px; /* Max width for very wide mobile screens */
  padding: 15px 0;
  text-align: center;
  font-size: 1.1em; /* Slightly smaller for more items */
  margin-bottom: 12px;
  border-radius: 4px; /* Optional: rounded buttons */
}
.mobile-menu-overlay.dark-mode-overlay .mobile-nav-button:hover {
    background-color: rgba(255,255,255,0.1);
}
.mobile-menu-overlay .mobile-nav-button:hover {
    background-color: rgba(0,0,0,0.05);
}


.mobile-menu-actions {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 16px;
    gap: 16px;
    border-top: 1px solid rgba(0,0,0,0.1);
    width: 100%;
    flex-shrink: 0; /* Prevent shrinking */
    box-sizing: border-box;
}
.mobile-menu-overlay.dark-mode-overlay .mobile-menu-actions {
    border-top: 1px solid rgba(255,255,255,0.1);
}
.mobile-menu-actions .mat-button,
.mobile-menu-actions .mat-flat-button {
    width: calc(100% - 32px);
    max-width: 300px;
}
.mobile-menu-actions .theme-toggle-button-mobile {
    /* Specific styling if needed, or inherits from .mat-icon-button */
}


/* Media queries are less critical for showing/hiding elements now due to *ngIf, */
/* but can be used for fine-tuning layout that *ngIf doesn't control. */
@media (max-width: 960px) {
  /* .middle-section is hidden by *ngIf="!isMobileView" */
  /* .mobile-menu-trigger-button is shown by *ngIf="isMobileView" */

  .app-toolbar {
    /* Example: Reduce padding on toolbar for mobile if needed */
    /* padding: 0 8px; */
  }
}

@media (max-width: 480px) {
  /* Example: Hide login button on toolbar for very small screens if still too crowded */
  /* .app-toolbar .login-button {
    display: none;
  } */

  .get-started-button span {
    /* display: none; /* Optionally hide text and only show icon on very small screens */
  }
  .get-started-button .mat-icon {
    /* margin-left: 0; /* If text is hidden */
  }

  .mobile-nav-button {
    font-size: 1em; /* Further reduce font size */
  }
}
